# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

import os
import pathlib
import pandas as pd
from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from snakemake.utils import validate
import subprocess
import tempfile
import yaml

S3 = S3RemoteProvider()

sys.path.insert(0, ".")
from lib import resource_calculator as rc

shell.executable("/bin/bash")
shell.prefix("set -euo pipefail; ")

try:
    pipeline_version = subprocess.check_output(
        ["git", "describe", "--tags", "HEAD"], encoding="UTF-8"
    ).strip()
except subprocess.CalledProcessError:
    pipeline_version = "{version not detected}"
print("Pangenome Construction from Unaligned Reads version {}".format(pipeline_version))


configfile: "config/config.yaml"


validate(config, "../schema/global_config_schema.yaml")

manifest = pd.read_table(config["manifest"], sep="\t").set_index("sampleid", drop=False)
validate(manifest, "../schema/manifest_schema.yaml")

with open("config/config_resources.yaml", "r") as f:
    config_resources = yaml.safe_load(f)
validate(config_resources, "../schema/resources_config_schema.yaml")

tempDir = config_resources["tmpdir"] if "tmpdir" in config_resources else tempfile.gettempdir()

TARGETS = expand(
    "results/initial-alignments/{reference_genome}/{subset_type}/{sampleid}.bam",
    reference_genome=config["reference-genome"]["name"],
    subset_type=["unaligned-pairs", "half-aligned-pairs"],
    sampleid=manifest.index,
)


rule all:
    input:
        TARGETS,


include: "rules/acquire-input-data.smk"
include: "rules/align-raw-reads.smk"
